package problem000

/**
70. 爬楼梯
假设你正在爬楼梯。需要 n阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。
示例 1：
输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：
输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶

链接：https://leetcode-cn.com/problems/climbing-stairs
*/
func climbStairs(n int) int {
	//计算公式： f(n) = f(n-1)+f(n-2)
	//f(0)=1,f(1)=1,f(2)=2,f(3)=3,f(4)=5，...
	//复杂度分析
	//时间复杂度：循环执行 nn 次，每次花费常数的时间代价，故渐进时间复杂度为 O(n)。
	//空间复杂度：这里只用了常数个变量作为辅助空间，故渐进空间复杂度为 O(1)。
	f1, f2, result := 1, 1, 1
	for i := 1; i < n; i++ {
		f2 = f1
		f1 = result
		result = f1 + f2
	}
	return result
}
