package problem000

/*
*
11. 盛最多水的容器
给定一个长度为 n 的整数数组height。有n条垂线，第 i 条线的两个端点是(i, 0)和(i, height[i])。
找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水。
返回容器可以储存的最大水量。
说明：你不能倾斜容器。
示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。

示例 2：
输入：height = [1,1]
输出：1
提示：
n == height.length
2 <= n <= 10^5
0 <= height[i] <= 10^4
*/
func maxArea(height []int) (ans int) {
	//在每个状态下，无论长板或短板向中间收窄一格，都会导致水槽 底边宽度 -1 变短：
	//若向内 移动短板 ，水槽的短板 min(h[i], h[j]) 可能变大，因此下个水槽的面积 可能增大 。
	//若向内 移动长板 ，水槽的短板 min(h[i], h[j]) 不变或变小，因此下个水槽的面积 一定变小 。
	//因此，初始化双指针分列水槽左右两端，循环每轮将短板向内移动一格，并更新面积最大值，直到两指针相遇时跳出；即可获得最大面积。
	i, j := 0, len(height)-1
	for i < j {
		if height[i] < height[j] {
			ans = max(ans, height[i]*(j-i))
			i += 1
		} else {
			ans = max(ans, height[j]*(j-i))
			j -= 1
		}
	}
	return ans
}
